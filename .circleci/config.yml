version: 2.1

orbs:
  node: circleci/node@5.1.0

references:
  repo_path: &repo_path
    /home/circleci/repo

  ng_workspace_path: &ng_workspace_path
    /home/circleci/repo/ddp-workspace

  playwright_path: &playwright_path
    /home/circleci/repo/playwright-e2e

  npm_cache_key: &npm_cache_key
    v1-dependency-npm2-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

  npm_cache_restore_key: &npm_cache_restore_key
    keys:
      - *npm_cache_key

  # Note: important that values of guids and keys have matching order!"
  study_keys: &study_keys
    "basil dsm-ui osteo brain angio mbc testboston mpc prion atcp rarex rgp esc cgc circadia pancan singular brugada lms fon"

  study_guids: &study_guids
    "basil NA CMI-OSTEO cmi-brain ANGIO cmi-mbc testboston cmi-mpc PRION atcp rarex RGP cmi-esc cgc circadia cmi-pancan singular brugada cmi-lms fon"

  # Job runs for develop branch only
  filter-develop-branch: &filter-develop-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: develop

  filter-pr-branch: &filter-pr-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        ignore:
          - test
          - staging
          - production
          - develop
          - master
          - /.*rc.*/
          - /.*hotfix.*/

  filter-release-branch: &filter-release-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - /^rc.*/
          - /^hotfix.*/

# Container for all the builds
executors:
  build-executor:
    docker:
      - image: broadinstitute/study-website-build:12-08-2020A
    working_directory: *ng_workspace_path
    resource_class: medium+

  playwright-test-executor:
    resource_class: medium+
    docker:
      # Playwright docker image version MUST match Playwright version in project
      - image: mcr.microsoft.com/playwright:v1.31.0-focal
    working_directory: *playwright_path
    environment:
      NODE_ENV: development # Needed if playwright is in devDependencies

commands:
  checkout-code:
    description: "Git checkout and install dependencies"
    steps:
      - checkout:
          path: *repo_path
      - restore_cache: *npm_cache_restore_key
      - run:
          name: Install dependencies
          command: |
            if [[ ! -d node_modules ]]; then
              npm ci
            else
              echo "package.json and package-lock.json unchanged, using cache"
            fi
      - save_cache:
          key: *npm_cache_key
          paths:
            - ./node_modules

  set-deployment-environment:
    description: "Determine working environment"
    steps:
      - run:
          name: Determine environment for branch << pipeline.git.branch >>
          command: |
            if [ "<< pipeline.parameters.deploy_env >>" != "UNKNOWN" ]
            then
              DEPLOY_TARGET_ENV="<< pipeline.parameters.deploy_env >>"
            else
              DEPLOY_TARGET_ENV="<< pipeline.git.branch >>"
            fi

            case $DEPLOY_TARGET_ENV in
              dev*)
                DEPLOY_ENV=dev
                BUILD_PARAMS=--source-map
              ;;
              test)
                DEPLOY_ENV=test
                BUILD_PARAMS=--source-map
              ;;
              staging)
                DEPLOY_ENV=staging
              ;;
              prod*)
                DEPLOY_ENV=prod
              ;;
              *)
                DEPLOY_ENV=dev
                BUILD_PARAMS=--source-map
                echo "Defaulting $DEPLOY_TARGET_ENV to dev environment"
              ;;
            esac
            echo "Setting deployment ENVIRONMENT to $DEPLOY_ENV"
            echo "export ENVIRONMENT=$DEPLOY_ENV" >> $BASH_ENV
            echo "export BUILD_PARAMS=$BUILD_PARAMS" >> $BASH_ENV
            source $BASH_ENV
          #

  deploy-exploded-build:
    description: Deploy files to GAE
    parameters:
      study_key:
        type: string
    steps:
      - run:
          name: Setup gcloud context
          command: |
            set -u
            readvault.sh secret/pepper/${ENVIRONMENT}/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: <<parameters.study_key>> generate config files and copy pepperConfig.js
          command: |
            set -u
            if [[ "<<parameters.study_key>>" != "dsm-ui" ]]; then
              ./build-study.sh v1 $ENVIRONMENT . <<parameters.study_key>> "$STUDY_GUID" --config
              cd ddp-workspace
              CONFIG_DIR="${OUTPUT_DIR}/assets/config"
              mkdir -p $CONFIG_DIR
              CONFIG_FILE_SRC_PATH="${ANGULAR_PROJECT_DIR_PATH}/output-config/pepperConfig.js"
              cp  $CONFIG_FILE_SRC_PATH $CONFIG_DIR
              echo "$CONFIG_FILE_SRC_PATH has been copied to $CONFIG_DIR"

              if [[ "<<parameters.study_key>>" == "atcp" ]]; then
                cp "${ANGULAR_PROJECT_DIR_PATH}/output-config/app.yaml" "${ANGULAR_PROJECT_DIR_PATH}/app.yaml"
              fi
            else
              cd ddp-workspace
              CONFIG_DIR="${OUTPUT_DIR}/assets/js"
              mkdir -p $CONFIG_DIR
              gcloud --project="broad-ddp-${ENVIRONMENT}" secrets versions access latest --secret="study-manager-ui-config" > "${CONFIG_DIR}/ddp_config.js"
            fi
          environment: #Setting this ENV variable prevents launching a new Docker within build-study-sh script
            USE_DOCKER: false
          working_directory: *repo_path
      - run:
          name: Deploy to GAE
          command: |
            set -u
            gcloud app deploy --version="${SHORT_GIT_SHA}" --stop-previous-version --promote --quiet --project "broad-ddp-${ENVIRONMENT}" "${ANGULAR_PROJECT_DIR_PATH}/app.yaml"
      - run:
          name: Update deployments sheet
          command: |
            set -u
            set +x
            readvault.sh secret/pepper/${ENVIRONMENT}/v1/conf .data.gcp.serviceKey | \
            reportdeploy.sh "$RELEASE_SHEET_ID" '<<parameters.study_key>> Angular client' "$ENVIRONMENT" "$CIRCLE_BUILD_NUM" "$CIRCLE_BUILD_URL"
          #

  setup-shared-env:
    description: "Setup shared ENV vars used by multiple scripts"
    parameters:
      study_key:
        type: string
        default: UNKNOWN
      study_keys:
        type: string
        default: *study_keys
      study_guids:
        type: string
        default: *study_guids
      repo_path:
        type: string
        default: *repo_path
    steps:
      - run:
          name: Set environment variables to build <<parameters.study_key>>
          command: |
            echo "export VAULT_TOKEN=`vault write -field=token auth/approle/login role_id=$VAULT_ROLE_ID secret_id=$VAULT_ROLE_SECRET_ID`" >> $BASH_ENV
            echo 'export PATH=$PATH:<< parameters.repo_path >>/build-utils' >> $BASH_ENV
            if [[ '<<parameters.study_key>>' != 'UNKNOWN' ]]; then
              echo 'export STUDY_KEY=<<parameters.study_key>>' >> $BASH_ENV
              STUDY_KEYS=(<<parameters.study_keys>>)
              STUDY_GUIDS=(<<parameters.study_guids>>)
              for i in ${!STUDY_KEYS[@]}; do
                  currentKey=${STUDY_KEYS[$i]}
                  if [[ $currentKey == '<<parameters.study_key>>' ]]; then
                      STUDY_GUID="${STUDY_GUIDS[$i]}"
                      echo "export STUDY_GUID=${STUDY_GUID}" >> $BASH_ENV
                      break;
                  fi
              done;
              if [[ -z $STUDY_GUID ]]; then
                echo "Could not find study guid for <<parameters.study_key>>"
                exit 1
              fi
              echo 'export ANGULAR_PROJECT_NAME=ddp-<<parameters.study_key>>' >> $BASH_ENV
              echo 'export ANGULAR_PROJECT_DIR_PATH=projects/ddp-<<parameters.study_key>>' >> $BASH_ENV
              source $BASH_ENV
              OUTPUT_DIR="${ANGULAR_PROJECT_DIR_PATH}/dist"
              echo "export OUTPUT_DIR=$OUTPUT_DIR" >> $BASH_ENV
            fi
            echo "export SHORT_GIT_SHA=`echo '<< pipeline.git.revision >>' | cut -c 1-7`" >> $BASH_ENV
            echo 'export BUILDS_BUCKET=ddp-build-artifacts' >> $BASH_ENV
            source $BASH_ENV
          #

  build:
    description: "Build DDP study app"
    parameters:
      study_key:
        type: string
        default: "UNKNOWN"
    steps:
      - set-deployment-environment
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - when:
          condition:
            equal: [ atcp, << parameters.study_key >> ]
          steps:
            - run:
                name: build atcp auth0 scripts
                command: |
                  set -u
                  ng build ddp-atcp-auth
                  npm run convert-atcp-auth-build-to-UMD
            - run:
                name: build atcp auth0 styles
                command: |
                  set -u
                  ./node_modules/.bin/sass ./projects/ddp-atcp/src/auth0/auth0-styles/main.scss ./projects/ddp-atcp/src/auth0/compiled/auth0-styles/main.css --style compressed
      - run:
          name: ng build
          command: |
            set -u
            export NODE_OPTIONS="--max-old-space-size=4096"
            ng build $ANGULAR_PROJECT_NAME $BUILD_PARAMS --configuration production --aot --base-href=/ --output-path=$OUTPUT_DIR --verbose=true --progress=true
          #

  conditionally-launch-build-and-deploy:
    description: Launch build and deploy if project has changed
    parameters:
      study_keys:
        type: string
    steps:
      - run:
          name: Check << parameters.study_keys >> and launch build if modified
          command: |
            set -u
            set +e
            set +x
            # CircleCi does not support arrays as params, so here is my workaround
            STUDY_KEYS=(<< parameters.study_keys >>)

            CHANGED_PROJECTS=$(findmodifiedprojects.sh <<pipeline.git.base_revision >> << pipeline.git.revision >>)

            echo "The following projects were found to have changed: $CHANGED_PROJECTS"

            for i in "${!STUDY_KEYS[@]}"; do
              STUDY_KEY=${STUDY_KEYS[$i]}

              NG_PROJECT_NAME="ddp-$STUDY_KEY"
              CHANGED_DEPENDENCIES=$(echo  $CHANGED_PROJECTS |
                  grep -E -e $NG_PROJECT_NAME -e _SHARED_  -e ddp-sdk -e toolkit)
              if [[ ! -z $CHANGED_DEPENDENCIES ]]; then
                echo "Launching build and deploy for $NG_PROJECT_NAME"
                curl -u "${CIRCLE_API_TOKEN}:" -X POST --header "Content-Type: application/json" -d "{
                                  \"branch\": \"<< pipeline.git.branch >>\",
                                  \"parameters\": {
                                      \"study_key\": \"$STUDY_KEY\",
                                      \"do-builds\": true
                                  }
                                }" https://circleci.com/api/v2/project/gh/broadinstitute/ddp-angular/pipeline
              else
                echo "Skipping $STUDY_KEY"
              fi
            done;
          #

  conditionally-launch-build-and-store:
    description: Launch build and save job if build missing
    parameters:
      study_key:
        type: string
    steps:
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - run:
          name: Initiate build for <<parameters.study_key>> and git SHA << pipeline.git.revision >> if existing one not found
          command: |
            set -u
            set +e
            readvault.sh secret/pepper/prod/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            TAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${ANGULAR_PROJECT_NAME}_*_${SHORT_GIT_SHA}.tar.gz"
            echo "Checking for ${TAR_FILE_URL_PATTERN}"
            # For some reason following line generating exit code 1 every time in CircleCI. Use set +e so script can continue
            TAR_FILE_URL=`gsutil ls $TAR_FILE_URL_PATTERN  | head -1`

            # if not found, let's kick off a build
            if [ -z $TAR_FILE_URL ]
              then
                echo "No build found for <<parameters.study_key>> with git sha ${SHORT_GIT_SHA}. Initiating a build for it."
                curl -u "${CIRCLE_API_TOKEN}:" -X POST --header "Content-Type: application/json" -d '{
                  "branch": "<< pipeline.git.branch >>",
                  "parameters": {
                      "study_key": "<<parameters.study_key>>",
                      "do-builds": true
                  }
                }' https://circleci.com/api/v2/project/gh/broadinstitute/ddp-angular/pipeline
              else
                echo "Build for <<parameters.study_key>> found at URL: ${TAR_FILE_URL}. No new build will be initiated"
            fi
          #

  run-ui-unit-test:
    description: Lint code and run ui unit tests for specified app
    parameters:
      study_key:
        type: string
    steps:
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - run:
          name: Lint app code
          command: |
            ng lint $ANGULAR_PROJECT_NAME
      - run:
          name: Run ng ui unit tests
          command: |
            echo "ng test $ANGULAR_PROJECT_NAME"
            mkdir -p /tmp/junit
            ng test $ANGULAR_PROJECT_NAME --watch=false --browsers ChromeHeadlessNoSandbox --reporters junit
          environment:
            JUNIT_REPORT_PATH: /tmp/ui/junit/
            JUNIT_REPORT_NAME: test-results.xml
          when: always
      - store_test_results:
          path: /tmp/ui/junit
      - store_artifacts:
          path: /tmp/ui/junit

  run-api-unit-test:
    description: Lint code and run api unit tests for sdk and toolkit
    steps:
      - run:
          name: Lint sdk and toolkit code
          command: |
            ng lint ddp-sdk
            ng lint toolkit
      - run:
          name: Run sdk and toolkit ng api unit tests
          command: |
            mkdir -p /tmp/junit
            ng test ddp-sdk --watch=false --browsers ChromeHeadlessNoSandbox --reporters junit
            ng test toolkit --watch=false --browsers ChromeHeadlessNoSandbox --reporters junit
          environment:
            JUNIT_REPORT_PATH: /tmp/api/junit/
            JUNIT_REPORT_NAME: test-results.xml
          when: always
      - store_test_results:
          path: /tmp/api/junit
      - store_artifacts:
          path: /tmp/api/junit

  halt-playwright-check:
    description: Stop running Playwright test job if halt conditions are met
    parameters:
      env:
        default: dev
        type: enum
        enum: [ dev, test, staging, prod, UNKNOWN ]
    steps:
      - when:
          # Stop running Playwright e2e tests if env is UNKNOWN, Prod or Staging
          condition:
            or:
              - equal: [ UNKNOWN, << parameters.env >> ]
              - equal: [ prod, << parameters.env >> ]
              - equal: [ staging, << parameters.env >> ]
          steps:
            - run:
                name: "Halt running Playwright test job. Not supported for ENV=<< parameters.env >>"
                command: circleci-agent step halt

  halt-when-study-unchanged:
    description: Stop job if specified study has not changed
    parameters:
      study_key:
        type: string
    steps:
      - run:
          name: Check << parameters.study_key >> and stop job if study has not changed
          command: |
            set -u
            CHANGED_STUDIES=$(../build-utils/findmodifiedprojects.sh << pipeline.git.base_revision >> << pipeline.git.revision >>)
            echo "The following projects were found to have changed: $CHANGED_STUDIES"
            
            NG_PROJECT_NAME="ddp-<< parameters.study_key >>"
            CHANGED_DEPENDENCIES=$(echo $CHANGED_STUDIES | grep -E -e $NG_PROJECT_NAME -e _SHARED_ -e ddp-sdk -e toolkit || true)
            echo "CHANGED_DEPENDENCIES: $CHANGED_DEPENDENCIES"
            
            if [[ -z $CHANGED_DEPENDENCIES ]]; then
              echo "Study << parameters.study_key >> has not changed"
              circleci-agent step halt
            else
              echo "Study has changed"
            fi
        #

  halt-build-archive:
    description: Stop new build and archive if build archive for specified study is found in Google bucket
    parameters:
      study_key:
        type: string
    steps:
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - run:
          name: Check build archive for <<parameters.study_key>> with git SHA << pipeline.git.revision >>
          command: |
            set -u
            set +e
            
            readvault.sh secret/pepper/prod/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            TAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${ANGULAR_PROJECT_NAME}_*_${SHORT_GIT_SHA}.tar.gz"
            echo "Checking for ${TAR_FILE_URL_PATTERN}"
            
            # For some reason following line generating exit code 1 every time in CircleCI. Use set +e so script can continue
            TAR_FILE_URL=`gsutil ls $TAR_FILE_URL_PATTERN  | head -1`

            # if not found, continue running build and store
            if [ -z $TAR_FILE_URL ]
              then
                echo "Build archive for <<parameters.study_key>> is not found at URL: ${TAR_FILE_URL}"
              else
                echo "Build archive for <<parameters.study_key>> is found at URL: ${TAR_FILE_URL}. No new build artifacts will be archived."
                circleci-agent step halt
            fi
          #


jobs:
  app-deploy:
    working_directory: *ng_workspace_path
    parameters:
      study_key:
        type: string
      check_changed:
        type: boolean
        default: false
    executor:
      name: build-executor
    steps:
      - checkout-code
      - when:
          condition: << parameters.check_changed >>
          steps:
            - halt-when-study-unchanged:
                study_key: << parameters.study_key >>
      - build:
          study_key: << parameters.study_key >>
      - deploy-exploded-build:
          study_key: << parameters.study_key >>

  conditionally-launch-build-and-deploy-all-job:
    working_directory: *ng_workspace_path
    executor:
      name: build-executor
    steps:
      - checkout:
          path: *repo_path
      - setup-shared-env
      - conditionally-launch-build-and-deploy:
          study_keys: *study_keys

  conditionally-launch-build-and-store-all-job:
    working_directory: *ng_workspace_path
    executor:
      name: build-executor
    steps:
      - checkout:
          path: *repo_path
      - conditionally-launch-build-and-store:
          study_key: basil
      - conditionally-launch-build-and-store:
          study_key: osteo
      - conditionally-launch-build-and-store:
          study_key: brain
      - conditionally-launch-build-and-store:
          study_key: angio
      - conditionally-launch-build-and-store:
          study_key: mbc
      - conditionally-launch-build-and-store:
          study_key: testboston
      - conditionally-launch-build-and-store:
          study_key: mpc
      - conditionally-launch-build-and-store:
          study_key: atcp
      - conditionally-launch-build-and-store:
          study_key: rarex
      - conditionally-launch-build-and-store:
          study_key: rgp
      - conditionally-launch-build-and-store:
          study_key: esc
      - conditionally-launch-build-and-store:
          study_key: prion
      - conditionally-launch-build-and-store:
          study_key: cgc
      - conditionally-launch-build-and-store:
          study_key: circadia
      - conditionally-launch-build-and-store:
          study_key: pancan
      - conditionally-launch-build-and-store:
          study_key: singular
      - conditionally-launch-build-and-store:
          study_key: brugada
      - conditionally-launch-build-and-store:
          study_key: lms
      - conditionally-launch-build-and-store:
          study_key: fon

  app-build:
    description: Run build and store build artifacts to Google cloud storage
    working_directory: *ng_workspace_path
    executor:
      name: build-executor
    parameters:
      study_key:
        type: string
      store_build:
        type: boolean
        default: true
      check_changed:
        type: boolean
        default: false
      check_archive:
        type: boolean
        default: false
    steps:
      - checkout-code
      - when:
          condition: << parameters.check_changed >>
          steps:
            - halt-when-study-unchanged:
                study_key: << parameters.study_key >>
      - when:
          condition: << parameters.check_archive >>
          steps:
            - halt-build-archive:
                study_key: << parameters.study_key >>
      - build:
          study_key: << parameters.study_key >>
      - when:
          # Store build artifacts if store_build = true
          condition: << parameters.store_build >>
          steps:
            - run:
                name: Create build archive for << parameters.study_key >> with git SHA << pipeline.git.revision >>
                command: |
                  set -u
                  DATE=`date +%F`
                  TAR_NAME="${ANGULAR_PROJECT_NAME}_${DATE}_${SHORT_GIT_SHA}.tar.gz"
                  TAR_PATH="/tmp/${TAR_NAME}"
                  # Save some ENV vars for in job downstream
                  echo "export TAR_NAME=$TAR_NAME" >> $BASH_ENV
                  echo "export TAR_PATH=$TAR_PATH" >> $BASH_ENV
                  cd ${OUTPUT_DIR}
                  tar -czvf ${TAR_PATH} .
                  echo "Tar file created at ${TAR_PATH}"
                  ls -l $TAR_PATH
            - run:
                name: Store build archive for << parameters.study_key >> with git SHA << pipeline.git.revision >>
                command: |
                  set -u
                  readvault.sh secret/pepper/prod/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
                  gsutil cp  ${TAR_PATH} "gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${TAR_NAME}"
                #

  deploy-stored-build-job:
    description: Deploy archived build to GAE
    working_directory: *ng_workspace_path
    parameters:
      study_key:
        type: string
    executor:
      name: build-executor
    steps:
      - checkout:
          path: *repo_path
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - set-deployment-environment
      - run:
          name: Retrieve and expand build archive for << parameters.study_key >> with git SHA << pipeline.git.revision >>
          command: |
            set -u
            # we are getting our builds from the one bucket
            readvault.sh secret/pepper/prod/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            TAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${ANGULAR_PROJECT_NAME}_*_${SHORT_GIT_SHA}.tar.gz"
            echo "Looking for archive matching ${TAR_FILE_URL_PATTERN}"
            TAR_FILE_URL=`gsutil ls $TAR_FILE_URL_PATTERN  | sort -r | head -1`

            if [ -z $TAR_FILE_URL ]
            then
              echo "Could not find archive using pattern ${TAR_FILE_URL_PATTERN}"
              exit 1
            fi
            TAR_FILE_PATH="/tmp/$(basename -- $TAR_FILE_URL)"
            echo "Downloading ${TAR_FILE_URL} to ${TAR_FILE_PATH}"
            gsutil cp  $TAR_FILE_URL $TAR_FILE_PATH
            mkdir -p $OUTPUT_DIR && tar -xvf $TAR_FILE_PATH -C $OUTPUT_DIR
            echo "Contents of extracted archive at $OUTPUT_DIR"
            ls -l $OUTPUT_DIR
      - deploy-exploded-build:
          study_key: << parameters.study_key >>

  playwright-build:
    executor: build-executor
    working_directory: *repo_path
    parameters:
      env:
        default: dev
        type: enum
        enum: [ dev, test, staging, prod, UNKNOWN ]
    steps:
      - halt-playwright-check:
          env: << parameters.env >>
      - checkout:
          path: *repo_path
      - setup-shared-env
      - run:
          # Reading Vault secrets here because build-executor provides Vault set-up
          name: Save Vault secrets into temp file to persist across jobs
          command: |
            set -u
            echo "export ENV=<< parameters.env >>" >> $BASH_ENV
            source $BASH_ENV
            .circleci/export-playwright-env.sh
      - node/install-packages:
          app-dir: *playwright_path
          override-ci-command: npm install
      - run:
          working_directory: *playwright_path
          command: npm run lint -- --max-warnings 0
      - run:
          working_directory: *playwright_path
          name: Compile project
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - playwright-env # dir which contains env-variables file
            - playwright-e2e

  playwright-test:
    # Run Playwright tests only for targeted env: Dev or Test.
    executor: playwright-test-executor
    working_directory: *repo_path
    parameters:
      env:
        default: dev
        type: enum
        enum: [ dev, test, staging, prod, UNKNOWN ]
      parallelism_num:
        type: integer
        default: 1
      test_suite:
        # to trigger E2E tests with labels matching study key:
        # [basil, osteo, angio, brain, mbc, testboston, mpc, atcp, rarex, rgp, esc, prion, cgc, circadia, pancan, singular, brugada, lms, fon]
        type: string
        default: << pipeline.parameters.study_key >>
    parallelism: << parameters.parallelism_num >>
    steps:
      - halt-playwright-check:
          env: << parameters.env >>
      - attach_workspace:
          at: .
      - run:
          name: Export env variables to BASH_ENV
          command: |
            cp "playwright-e2e/config/.env.<< parameters.env >>" .env
            cat .env | awk '/^[^#]/ {print "export " $0}' >> "$BASH_ENV"
            # export env from file (created in build-playwright-job)
            cat playwright-env/envvars | awk '{print "export " $0}' >> "$BASH_ENV"
            source $BASH_ENV
      - node/install:
          install-yarn: false
          node-version: '18.13.0' # LTS version
      - run:
          working_directory: *playwright_path
          command: npm install --quiet
      - run:
          working_directory: *playwright_path
          command: npx playwright install --with-deps chromium # Only need Chrome browser

      - run:
          name: Running Playwright tests
          working_directory: *playwright_path
          command: |
            echo 'Study: ' << parameters.test_suite >>
            if [ << parameters.test_suite >> == "UNKNOWN" ]; then
              # Grep all E2E tests
              npx playwright test --list | grep -o 'tests/.*.spec.ts' > e2e_tests.txt
            else
              # Grep E2E tests for this study.
              npx playwright test --list -g @<< parameters.test_suite >> | grep -o 'tests/.*.spec.ts' > e2e_tests.txt
            fi
            TESTS_FILE=$(circleci tests split --split-by=timings --timings-type=classname e2e_tests.txt)
            npm run test:ci $TESTS_FILE
          no_output_timeout: 3m # Default is 10m. Set shorter time to ensure CI fails faster if test hangs
      - store_test_results:
          path: playwright-e2e/junit
      - store_artifacts:
          path: playwright-e2e/junit
          destination: junit
      - store_artifacts:
          path: playwright-e2e/test-results
          destination: test-results
      - store_artifacts:
          path: playwright-e2e/html-test-results
          destination: html-test-results

  api-unit-test:
    description: Lint code and run api unit tests for sdk and toolkit
    working_directory: *ng_workspace_path
    executor:
      name: build-executor
    steps:
      - checkout-code
      - run-api-unit-test

  ui-unit-test:
    description: Lint code and run ui unit tests for specified app
    working_directory: *ng_workspace_path
    executor:
      name: build-executor
    parameters:
      study_key:
        type: string
      check_changed:
        type: boolean
        default: false
    steps:
      - checkout-code
      - when:
          condition: << parameters.check_changed >>
          steps:
            - halt-when-study-unchanged:
                study_key: << parameters.study_key >>
      - run-ui-unit-test:
          study_key: << parameters.study_key >>

parameters:
  study_key:
    type: string
    default: "UNKNOWN"
  study_guid:
    type: string
    default: "UNKNOWN"
  api_call:
    type: enum
    enum: ["build-and-store","deploy", "run-tests", "run-e2e-tests", "UNKNOWN"]
    default: "UNKNOWN"
  deploy_env:
    type: enum
    enum: ["dev", "test", "staging", "prod", "UNKNOWN"]
    default: "UNKNOWN"
  do-builds:
    type: boolean
    default: false
  e2e-test-parallelism:
    type: integer
    default: 1
  scheduled-playwright:
    type: boolean
    default: false

workflows:
  version: 2

  build-test-pr:
    # Automatically run on every PR commit.
    # CircleCI API calls will not launch this workflow.
    when:
      and:
        - equal: [ "UNKNOWN", << pipeline.parameters.api_call >> ]
        - equal: [ "UNKNOWN", << pipeline.parameters.study_key >> ]
        - equal: [ "UNKNOWN", << pipeline.parameters.deploy_env >> ]
    jobs:
      - app-build:
          <<: *filter-pr-branch
          # Don't store PR build artifacts
          store_build: false
          name: << matrix.study_key >>-build
          matrix:
            alias: app-build
            parameters: &studies
              study_key: [ dsm-ui, basil, osteo, brain, angio, mbc, testboston, mpc, prion, atcp, rarex, rgp, esc, cgc, circadia, pancan, singular, brugada, lms ]
          check_changed: true
          requires:
            - << matrix.study_key >>-ui-unit-test-pr
            - api-unit-test
      - ui-unit-test:
          <<: *filter-pr-branch
          name: << matrix.study_key >>-ui-unit-test-pr
          matrix:
            alias: app-ui-unit-test
            parameters:
              <<: *studies
          check_changed: true
      - api-unit-test:
          <<: *filter-pr-branch
      - playwright-build:
          <<: *filter-pr-branch

  build-single-app:
    # Build study specified in api call by run_ci.sh
    when:
      and:
        - equal: ["build-and-store", << pipeline.parameters.api_call >>]
        - not:
            equal: ["UNKNOWN", << pipeline.parameters.study_key >>]
    jobs:
      - ui-unit-test:
          study_key: << pipeline.parameters.study_key >>
      - api-unit-test
      - app-build:
          study_key: << pipeline.parameters.study_key >>
          requires:
            - ui-unit-test
            - api-unit-test

  deploy-single-app:
    # Deploy a study build to environment specified in api call by run_ci.sh
    when:
      and:
        - equal: ["deploy", << pipeline.parameters.api_call >>]
        - not:
            equal: ["UNKNOWN", << pipeline.parameters.deploy_env >>]
        - << pipeline.parameters.study_key >>
        - not:
            equal: ["UNKNOWN", << pipeline.parameters.study_key >>]
    jobs:
      - deploy-stored-build-job:
          study_key: << pipeline.parameters.study_key >>

  api-run-tests-workflow:
    # Run ui tests for study specified in api call by run_ci.sh and tests for sdk and toolkit
    when:
      and:
        - equal: ["run-tests", << pipeline.parameters.api_call >>]
        - not:
            or:
              - equal: ["UNKNOWN", << pipeline.parameters.study_key >>]
              - equal: ["unknown", << pipeline.parameters.study_key >>]
    jobs:
      - api-unit-test
      - ui-unit-test:
          study_key: << pipeline.parameters.study_key >>

  playwright-test-workflow:
    # Triggered by CI API (for example, run_ci.sh)
    # Run Playwright tests against Dev and Test but not for Staging and Production
    when:
      and:
        - equal: [ "run-e2e-tests", << pipeline.parameters.api_call >> ]
    jobs:
      - playwright-build:
          env: << pipeline.parameters.deploy_env >>
      - playwright-test:
          env: << pipeline.parameters.deploy_env >>
          test_suite: << pipeline.parameters.study_key >>
          parallelism_num: << pipeline.parameters.e2e-test-parallelism >>
          requires:
            - playwright-build

  build-and-deploy-all-apps-workflow:
    # check all studies, launch GAE deploy if a study has changed.
    when:
      and:
        - not: << pipeline.parameters.do-builds >>
        - not: << pipeline.parameters.scheduled-playwright >>
    jobs:
      - api-unit-test:
          <<: *filter-develop-branch
      - ui-unit-test:
          <<: *filter-develop-branch
          name: << matrix.study_key >>-ui-unit-test
          matrix:
            alias: ui-unit-test
            parameters:
              <<: *studies
          check_changed: true
      - app-deploy:
          <<: *filter-develop-branch
          name: << matrix.study_key >>-deploy
          matrix:
            alias: app-deploy
            parameters:
              <<: *studies
          check_changed: true
          requires:
            - << matrix.study_key >>-ui-unit-test
            - api-unit-test
      - playwright-build:
          # run Playwright build and test after app-deploy
          <<: *filter-develop-branch
          env: dev # env is Dev because it's PR merge into develop branch
      - playwright-test:
          <<: *filter-develop-branch
          env: dev
          test_suite: UNKNOWN
          parallelism_num: 2
          requires:
            - playwright-build
            - app-deploy

  build-and-deploy-workflow:
    when:
      and:
        - << pipeline.parameters.do-builds >>
        - equal: ["UNKNOWN", << pipeline.parameters.deploy_env >>]
    jobs:
      - app-deploy:
          study_key: << pipeline.parameters.study_key >>
          filters:
            branches:
              ignore:
                - /^rc.*/
                - /^hotfix.*/

  launch-all-app-builds-workflow:
    # using do-builds param to select which of the two workflows using the build-on-tag-filters
    # should run; should be this one that just launches the builds or the one actually doing the builds
    when:
      and:
        - not: << pipeline.parameters.do-builds >>
        - equal: [ UNKNOWN, << pipeline.parameters.api_call >> ]
    jobs:
      - api-unit-test:
          <<: *filter-release-branch
      - ui-unit-test:
          <<: *filter-release-branch
          name: << matrix.study_key >>-ui-unit-test
          matrix:
            alias: app-ui-unit-test
            parameters:
              <<: *studies
      - app-build:
          <<: *filter-release-branch
          name: << matrix.study_key >>-build
          matrix:
            alias: app-build
            parameters:
              <<: *studies
          check_archive: true
          store_build: true
          requires:
            - << matrix.study_key >>-ui-unit-test
            - api-unit-test

  build-app-workflow:
    when: << pipeline.parameters.do-builds >>
    jobs:
      - ui-unit-test:
          <<: *filter-release-branch
          study_key: << pipeline.parameters.study_key >>
      - api-unit-test:
          <<: *filter-release-branch
      - app-build:
          <<: *filter-release-branch
          study_key: << pipeline.parameters.study_key >>
          requires:
            - ui-unit-test
            - api-unit-test

  deploy-all-apps-workflow:
    jobs:
      - deploy-stored-build-job:
          filters:
            branches:
              only:
                - test
                - staging
          study_key: basil
      - deploy-stored-build-job: &deploy_branch_filters
          filters:
            branches:
              only:
                - test
                - staging
                - production
          study_key: osteo
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: brain
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: mbc
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: angio
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: testboston
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: mpc
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: atcp
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: rarex
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: rgp
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: esc
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: prion
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: cgc
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: circadia
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: pancan
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: singular
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: brugada
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: lms
      - deploy-stored-build-job:
          <<: *deploy_branch_filters
          study_key: fon

  scheduled-playwright-test:
    # Triggered every 4 hours on Monday through Friday
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ nightly-playwright-test, << pipeline.schedule.name >> ]
        - << pipeline.parameters.scheduled-playwright >>
    jobs:
      - playwright-build:
          <<: *filter-develop-branch
          env: << pipeline.parameters.deploy_env >>
      - playwright-test:
          <<: *filter-develop-branch
          env: << pipeline.parameters.deploy_env >>
          parallelism_num: 2
          test_suite: UNKNOWN
          requires:
            - playwright-build
