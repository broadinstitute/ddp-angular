version: 2.1
references:
  npm_cache_key: &npm_cache_key
                   v1-dependency-npm-{{ checksum "package-lock.json" }}


executors:
  commit-executor:
    docker:
      - image: broadinstitute/study-server-build:02-20-2020A
    working_directory: ~/repo

  nightly-executor:
    docker:
      - image: broadinstitute/study-server-build:02-20-2020A
    working_directory: ~/repo

commands:
  set-deployment-environment:
    description: "Set ENVIRONMENT env variable based on branch"
    steps:
      - run:
          name: Determine deployment environment
          command: |
            case "<< pipeline.git.branch >>" in
              develop)
                DEPLOY_ENV=dev
              ;;
              deletemewhendone)
                DEPLOY_ENV=dev
              ;;
              test)
                DEPLOY_ENV=test
                NG_BUILD_OPTS=--prod --aot
              ;;
              staging)
                DEPLOY_ENV=staging
                NG_BUILD_OPTS=--prod --aot
              ;;
              staging)
                DEPLOY_ENV=prod
                NG_BUILD_OPTS=--prod --aot
              ;;
              *)
                echo "Cannot map << pipeline.git.branch >> to a deployment environment"
                exit 17
              ;;
            esac
            echo "Setting deployment ENVIRONMENT to $DEPLOY_ENV"
            echo "export ENVIRONMENT=$DEPLOY_ENV" >> $BASH_ENV
            echo "export NG_BUILD_OPTS=$NG_BUILD_OPTS" >> $BASH_ENV
            source $BASH_ENV
  build-and-deploy-study:
    description: "Build and deploy angular study website"
    parameters:
      study_key:
        type: string
      study_guid:
        type: string
    steps:
      - checkout:
          path: ~/repo
      - set-deployment-environment
      - run:
          name: <<parameters.study_key>> update interpolated env vars
          command: |
            echo 'export ANGULAR_PROJECT_NAME=ddp-<<parameters.study_key>>' >> $BASH_ENV
            echo 'export ANGULAR_PROJECT_DIR_PATH=projects/ddp-<<parameters.study_key>>' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: <<parameters.study_key>> show pipeline vars
          command: |
            echo "pipeline.id << pipeline.id >>"
            echo "pipeline.number	 << pipeline.number	 >>"
            echo "pipeline.project.git_url << pipeline.project.git_url >>"
            echo "pipeline.project.type << pipeline.project.type >>"
            echo "pipeline.git.tag << pipeline.git.tag >>"
            echo "pipeline.git.branch << pipeline.git.branch >>"
            echo "pipeline.git.revision << pipeline.git.revision >>"
            echo "pipeline.git.base_revision << pipeline.git.base_revision >>"
      - run:
          name: <<parameters.study_key>> show environment variables
          command: env
      - run:
          name: <<parameters.study_key>> generate config files
          command: ./build-study.sh v1 $ENVIRONMENT . <<parameters.study_key>> <<parameters.study_guid>> --config
          environment:
            USE_DOCKER: false
      # todo: conditionally don't build if we already have cached the tarball for the SHA+ENV somewhere (circle artifacts?  github package manager?  GCP bucket?
      # for better build reproducibility, we want to move the same build artifacts to different environments and not rebuild them and
      # suffer the pain of npm caching, package-lock, and auto-upgrade pitfalls
      - restore_cache:
          key: *npm_cache_key
      - run:
          name: <<parameters.study_key>> npm install
          command: npm install
          working_directory: ~/repo/ddp-workspace
      - save_cache:
          key: *npm_cache_key
          paths:
            - ./node_modules
      - run:
          name: <<parameters.study_key>> ng build
          command: ng build $ANGULAR_PROJECT_NAME $NG_BUILD_OPTS --base-href=/ --output-path=$ANGULAR_PROJECT_DIR_PATH/dist --verbose=true --progress=true
          working_directory: ~/repo/ddp-workspace
      - run:
          name: <<parameters.study_key>> setup gcloud context
          command: |
            ./readvault.sh secret/pepper/dev/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: <<parameters.study_key>> deploy to GAE
          command: gcloud app deploy --version="${CIRCLE_SHA1}" --project "broad-ddp-${ENVIRONMENT}" "${ANGULAR_PROJECT_DIR_PATH}/app.yaml"
          working_directory: ~/repo/ddp-workspace
  app-build-and-store:
    description: Run build and store archive of it
    parameters:
      study_key:
        type: string
    steps:
      - setup-build-workspace
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - build-app
      - store-app-build

  deploy-stored-build:
    description: "Deploy build archive to GAE"
    parameters:
      study_key:
        type: string
      study_guid:
        type: string
    steps:
      - checkout:
          path: ~/repo
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - set-deployment-environment
      - run:
          name: Retrieve and expand build archive for << parameters.study_key >> with git SHA << pipeline.git.revision >>
          command: |
            set -u
            # we are getting our builds from the one bucket
            ./readvault.sh secret/pepper/dev/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            TAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${ANGULAR_PROJECT_NAME}_*_${SHORT_GIT_SHA}.tar.gz"
            TAR_FILE_URL=`gsutil ls $TAR_FILE_URL_PATTERN  | sort -r | head -1`
            if [ -z $TAR_FILE_URL ]
            then
              echo "Could not find archive using pattern ${TAR_FILE_URL_PATTERN}"
              exit 1
            fi
            TAR_FILE_PATH="/tmp/$(basename -- $TAR_FILE_URL)"
            gsutil cp  $TAR_FILE_URL $TAR_FILE_PATH
            cd ~/repo/ddp-workspace
            # this is where app.yaml files are pointing for assets
            # save it to use in next step
            OUTPUT_DIR="${ANGULAR_PROJECT_DIR_PATH}/dist"
            echo "export OUTPUT_DIR=$OUTPUT_DIR" >> $BASH_ENV
            source $BASH_ENV
            mkdir -p $OUTPUT_DIR && tar -xvf $TAR_FILE_PATH -C $OUTPUT_DIR
            echo "Contents of extracted archive:"
            ls -l $OUTPUT_DIR
      - run:
          name: <<parameters.study_key>> generate config files and copy pepperConfig.js
          command: |
            set -u
            ./build-study.sh v1 $ENVIRONMENT . <<parameters.study_key>> <<parameters.study_guid>> --config
            cd ddp-workspace
            CONFIG_DIR="${OUTPUT_DIR}/assets/config"
            mkdir -p $CONFIG_DIR
            cp "${ANGULAR_PROJECT_DIR_PATH}/output-config/pepperConfig.js" $CONFIG_DIR
          environment:
            USE_DOCKER: false
      - run:
          name: Setup gcloud context
          command: |
            set -u
            ./readvault.sh secret/pepper/${ENVIRONMENT}/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Deploy to GAE
          command: gcloud app deploy --version="${SHORT_GIT_SHA}" --stop-previous-version --project "broad-ddp-${ENVIRONMENT}" "${ANGULAR_PROJECT_DIR_PATH}/app.yaml"
          working_directory: ~/repo/ddp-workspace

  setup-shared-env:
    description: "Setup shared ENV vars"
    parameters:
      study_key:
        type: string
    steps:
      - run:
          name: Set environment variables to build <<parameters.study_key>>
          command: |
            echo 'export ANGULAR_PROJECT_NAME=ddp-<<parameters.study_key>>' >> $BASH_ENV
            echo 'export ANGULAR_PROJECT_DIR_PATH=projects/ddp-<<parameters.study_key>>' >> $BASH_ENV
            echo "export SHORT_GIT_SHA=`echo '<< pipeline.git.revision >>' | cut -c 1-7`" >> $BASH_ENV
            echo 'export BUILDS_BUCKET=ddp-angular-builds' >> $BASH_ENV
            source $BASH_ENV
  setup-build-workspace:
    description: "Setup workspace used by all projects"
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          key: *npm_cache_key
      - run:
          name: npm install
          command: npm install
          working_directory: ~/repo/ddp-workspace
      - save_cache:
          key: *npm_cache_key
          paths:
            - ./node_modules
  build-app:
    description: "Build DDP study app"
    steps:
      - run:
          name: ng build
          command: |
            set -u
            ng build $ANGULAR_PROJECT_NAME --base-href=/ --output-path=dist/$ANGULAR_PROJECT_NAME --verbose=true --progress=true
          working_directory: ~/repo/ddp-workspace

  store-app-build:
    description: "Copy build to cloud storage"
    steps:
      - run:
          name: Create build archive
          command: |
            set -u
            DATE=`date +%F`
            TAR_NAME="${ANGULAR_PROJECT_NAME}_${DATE}_${SHORT_GIT_SHA}.tar.gz"
            TAR_PATH="/tmp/${TAR_NAME}"
            # Save some ENV vars for in job downstream
            echo "export ANGULAR_PROJECT_NAME=$ANGULAR_PROJECT_NAME" >> $BASH_ENV
            echo "export TAR_NAME=$TAR_NAME" >> $BASH_ENV
            echo "export TAR_PATH=$TAR_PATH" >> $BASH_ENV
            cd dist/${ANGULAR_PROJECT_NAME}
            tar -czvf ${TAR_PATH} .
          working_directory: ~/repo/ddp-workspace
      - run:
          name: Store build archive
          command: |
            set -u
            ./readvault.sh secret/pepper/dev/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            gsutil cp  ${TAR_PATH} "gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${TAR_NAME}"
          working_directory: ~/repo
  conditionally-launch-build-and-store:
    description: Launch build and save job if build missing
    parameters:
      study_key:
        type: string
    steps:
      - setup-shared-env:
          study_key: << parameters.study_key >>
      - run:
          name: Initiate build for <<parameters.study_key>> and git SHA << pipeline.git.revision >> if existing one not found
          command: |
            set -u
            set +e
            ./readvault.sh secret/pepper/dev/v1/conf .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            TAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/${ANGULAR_PROJECT_NAME}/${ANGULAR_PROJECT_NAME}_*_${SHORT_GIT_SHA}.tar.gz"
            echo "Checking for ${TAR_FILE_URL_PATTERN}"
            # For some reason following line generating exit code 1 every time in CircleCI. Use set +e so script can continue
            TAR_FILE_URL=`gsutil ls $TAR_FILE_URL_PATTERN  | head -1`
            if [ -z $TAR_FILE_URL ]
              then
                curl -u "${CIRCLE_API_TOKEN}:" -X POST --header "Content-Type: application/json" -d '{
                  "tag": "<< pipeline.git.tag >>",
                  "parameters": {
                      "study_key": "<<parameters.study_key>>",
                      "build-it": true
                  }
                }' https://circleci.com/api/v2/project/gh/broadinstitute/ddp-angular/pipeline
              else
                echo "Build for <<parameters.study_key>> found at URL: ${TAR_FILE_URL}. No new build will be initiated"
            fi

jobs:
  conditionally-build-and-store-all:
    executor:
      name: commit-executor
    steps:
      - checkout
      - conditionally-launch-build-and-store:
          study_key: osteo
      - conditionally-launch-build-and-store:
          study_key: brain
      - conditionally-launch-build-and-store:
          study_key: angio
      - conditionally-launch-build-and-store:
          study_key: mbc

  pipeline-app-build-and-store:
    executor:
      name: commit-executor
    steps:
      - app-build-and-store:
          study_key: << pipeline.parameters.study_key >>

  osteo-deploy-only:
    executor:
      name: commit-executor
    steps:
      - deploy-stored-build:
          study_key: osteo
          study_guid: CMI-OSTEO

  brain-deploy-only:
    executor:
      name: commit-executor
    steps:
      - deploy-stored-build:
          study_key: brain
          study_guid: cmi-brain

  angio-deploy-only:
    executor:
      name: commit-executor
    steps:
      - deploy-stored-build:
          study_key: angio
          study_guid: ANGIO

  mbc-deploy-only:
    executor:
      name: commit-executor
    steps:
      - deploy-stored-build:
          study_key: mbc
          study_guid: cmi-mbc

  osteo-build-and-deploy:
    executor:
      name: commit-executor
    steps:
      - build-and-deploy-study:
          study_key: osteo
          study_guid: CMI-OSTEO

  osteo-build-and-save:
    executor:
      name: commit-executor
    steps:
      - app-build-and-store:
          study_key: osteo

  angio:
    executor:
      name: commit-executor
    steps:
      - build-and-deploy-study:
          study_key: angio
          study_guid: ANGIO

  brain:
    executor:
      name: commit-executor
    steps:
      - build-and-deploy-study:
          study_key: brain
          study_guid: cmi-brain

  mbc:
    executor:
      name: commit-executor
    steps:
      - build-and-deploy-study:
          study_key: mbc
          study_guid: cmi-mbc

parameters:
  study_key:
    type: string
    default: "UNKNOWN"
  build-it:
    type: boolean
    default: false

workflows:
  version: 2
  build-all:
    unless: << pipeline.parameters.build-it >>
    jobs:
      - conditionally-build-and-store-all:
          filters:
            tags:
              only:
                - /^angular_test_.*/
            branches:
              ignore: /.*/

  build-all-apps-workflow:
    when: << pipeline.parameters.build-it >>
    jobs:
      - pipeline-app-build-and-store:
          filters:
            tags:
              only:
                - /^angular_test_.*/
                - /^rc.*/
                - /^hotfix.*/
            branches:
              ignore: /.*/

  deploy-all-apps-workflow:
    jobs:
      - osteo-deploy-only: &deploy-filters
          filters:
            branches:
              only:
                - test
                - staging
                - production
                - deletemewhendone
      - brain-deploy-only:
          <<: *deploy-filters
      - mbc-deploy-only:
          <<: *deploy-filters
      - angio-deploy-only:
          <<: *deploy-filters

  build-deploy:
    jobs:
      - osteo-build-and-deploy:
          # todo: more DRY on branch filtering
          filters:
            branches:
              only:
                - develop
      - osteo-build-and-save:
          filters:
            branches:
              only:
                - /^xxangular-appengine-deployment.*/
      - osteo-deploy-only:
          filters:
            tags:
              only:
                - /^xx_angular_test_.*/
            branches:
              ignore: /.*/
      - angio:
          filters:
            branches:
              only:
                - develop
      - brain:
          filters:
            branches:
              only:
                - develop
      - mbc:
          filters:
            branches:
              only:
                - develop

#  nightly:
#    # run a build on develop using --prod --aot as an early warning for prod/aot issues
#
#    triggers:
#      - schedule:
#          cron: "0 22 * * *"
#          filters:
#            branches:
#              only:
#                - develop
#    jobs:
#      - osteo:
#          name: osteo-nightly
#      - angio:
#          name: angio-nightly
#      - brain:
#          name: brain-nightly
#      - mbc:
#          name: mbc-nightly
